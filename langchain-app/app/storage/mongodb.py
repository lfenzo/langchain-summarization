from typing import Any
from bson import ObjectId
from bson.binary import Binary
from pymongo import MongoClient

from app.models import FeedbackForm
from app.storage import BaseStoreManager


# currently mongodb can only store document of up to 16MB in size
MAX_DOCUMENT_SIZE_IN_BYTES = 16_793_598  # obtained from pymongo error message (~16MB)


class MongoDBStoreManager(BaseStoreManager):
    """
    MongoDB-based implementation of the BaseStoreManager for storing summaries and feedback.

    This class manages the storage of summary documents and metadata in a MongoDB collection.

    Attributes
    ----------
    database_name : str
        The name of the MongoDB database used for storing summaries.
    collection_name : str
        The name of the MongoDB collection used for storing summaries.
    client : MongoClient
        The MongoDB client used to connect to the database.
    db : Database
        The MongoDB database instance.
    """

    def __init__(
        self,
        user: str = 'root',
        password: str = 'password',
        port: str = '27017',
        database_name: str = 'summary_database',
        collection_name: str = 'summaries',
    ) -> None:
        """
        Initializes the MongoDBStoreManager with database and collection settings.

        Parameters
        ----------
        user : str, optional
            The username for connecting to MongoDB (default is 'root').
        password : str, optional
            The password for connecting to MongoDB (default is 'password').
        port : str, optional
            The port for connecting to MongoDB (default is '27017').
        database_name : str, optional
            The name of the MongoDB database to use (default is 'summary_database').
        collection_name : str, optional
            The name of the MongoDB collection to use (default is 'summaries').
        """
        connection_string = self.get_connection_string(user=user, password=password, port=port)
        self.database_name = database_name
        self.collection_name = collection_name
        self.client = MongoClient(connection_string)
        self.db = self.client[self.database_name]

    def get_connection_string(self, user: str, password: str, port: str) -> str:
        """
        Constructs the MongoDB connection string.

        Parameters
        ----------
        user : str
            The username for connecting to MongoDB.
        password : str
            The password for connecting to MongoDB.
        port : str
            The port for connecting to MongoDB.

        Returns
        -------
        str
            The MongoDB connection string.
        """
        return f"mongodb://{user}:{password}@mongodb:{port}/"

    def document_can_be_stored(self, document: bytes) -> bool:
        """
        Checks if the document can be stored based on its size.

        MongoDB has a size limit of 16MB for documents.

        Parameters
        ----------
        document : bytes
            The document to check.

        Returns
        -------
        bool
            True if the document size is within the limit, otherwise False.
        """
        return len(document) <= MAX_DOCUMENT_SIZE_IN_BYTES

    def _get_summary_document_by_id(self, document_id: str) -> dict[str, Any]:
        """
        Retrieves a summary document from MongoDB by its document ID.

        Parameters
        ----------
        document_id : str
            The ID of the document to retrieve.

        Returns
        -------
        dict[str, Any]
            The MongoDB document associated with the given document ID.
        """
        collection = self.db[self.collection_name]
        document = collection.find_one({"_id": ObjectId(document_id)})
        return document

    def get_summary(self, **kwargs):
        """
        Retrieves a summary from MongoDB.

        This is a wrapper method for `_get_summary_document_by_id`.

        Parameters
        ----------
        **kwargs : dict
            Keyword arguments used to find the summary document.

        Returns
        -------
        dict[str, Any]
            The summary document.
        """
        return self._get_summary_document_by_id(**kwargs)

    async def store_summary(self, _id: str, summary: str, metadata: dict, document: bytes) -> str:
        """
        Stores a summary and its metadata in MongoDB.

        The method stores the generated summary, its metadata, and the original document in byte
        format. If the document size exceeds the MongoDB limit (16MB), the document is set to None.

        Parameters
        ----------
        _id : str
            The unique identifier of the document (usually from the model execution).
        summary : str
            The summary generated by the language model (LLM).
        metadata : dict
            Metadata associated with the summary, including details about the document.
        document : bytes
            The original document in byte format (e.g., PDF or other types).

        Returns
        -------
        str
            The ID of the stored document (typically the same as `_id`).
        """
        document = Binary(document) if self.document_can_be_stored(document) else None
        collection = self.db[self.collection_name]

        if not collection.find_one({"_id": _id}):
            summary_entry = {
                "_id": _id,
                "metadata": metadata,
                "summary": summary,
                "original_document_in_bytes": document,
                "feedback": None,
            }
            collection.insert_one(document=summary_entry)
        else:
            # TODO: log here that the current summary was obtained from caching (so we're not
            # inserting it in the database)
            pass

        return _id

    async def store_summary_feedback(self, form: FeedbackForm) -> None:
        """
        Stores user feedback for a summary in MongoDB.

        This method updates the summary document with feedback provided in the form.

        Parameters
        ----------
        form : FeedbackForm
            The feedback form containing user feedback on the summary.

        Raises
        ------
        ValueError
            If no document is found matching the provided feedback form's `document_id`.
        """
        collection = self.db[self.collection_name]

        feedback_dict = {
            key: value
            for key, value in form.dict().items() if key != 'document_id'
        }

        update_result = collection.update_one(
            {"_id": form.document_id},
            {"$set": {"feedback": feedback_dict}}
        )

        if update_result.matched_count == 0:
            raise ValueError(f"Failed to update document with ObjectId '{form.document_id}'")
