from abc import ABC, abstractmethod

from app.models.feedback import FeedbackForm


class BaseStoreManager(ABC):

    @abstractmethod
    def get_summary(self):
        ...

    @abstractmethod
    def store_summary(self, _id: str, summary: str, metadata: dict, document: bytes) -> str:
        """
        Store a summary and its related metadata in the database.

        This method saves the generated summary produced by the LLM, along with its associated
        metadata and the original document in byte form. The `_id` parameter is the identifier
        returned by the BaseModel execution, encapsulated within an `AIMessage` object, which
        results from a model invocation.

        Parameters
        ----------
        _id : str
            The unique identifier returned by the BaseModel execution, encapsulated in an
            `AIMessage` object.
        summary : str
            The summary generated by the language model (LLM).
        metadata : dict
            A dictionary containing information about the summary generation, including metadata
            about the original document, class, generation metadata, and other relevant details.
        document : bytes
            The original document in byte format (e.g., a PDF, audio, or other file).

        Returns
        -------
        str
            The ID of the stored document (typically the same as the passed `_id`).
        """
        ...

    @abstractmethod
    def store_summary_feedback(self, form: FeedbackForm):
        ...
